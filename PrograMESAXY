/* ========================================
 *
 * Copyright YOUR COMPANY, THE YEAR
 * All Rights Reserved
 * UNPUBLISHED, LICENSED SOFTWARE.
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION
 * WHICH IS THE PROPERTY OF your company.
 *
 * ========================================
*/

#include "project.h"
#include "stdbool.h"
#include "stdio.h"
#include "usbuartio.h"  


/**********Entradas del Psoc para los finales de carrera**********/
int Pin1; // Entrada digital 1 
int Pin2; // Entrada digital 2
int Pin3; // Entrada digital 3
int Pin4; // Entrada digital 4

/**************************************************************/

/*************************Variables****************************/


//Salidas del Sistema
float posx0, posx1 , posx2 =0 ; // Muestras de la poscion x(n), x(n-1), x(n-2)
float posy0 , posy1 , posy2 =0; // Muestra de la poscion  y(n), y(n-1), y(n-2)


//Funcion del control
#define REFF 

float eX, eY;    //ex(n), ey(n)
float eX1, eY1;  //ex(n-1), ey(n-1)
float eX2, eY2;  //ex(n-2), ey(n-2)

float sc, sc1, sc2 =0 ; //salida de control sc(n), sc(n-1), sc(n-2) 


float psoc=0;

float vel=0;
float vel1=0;
float vel2=0;
//Constantes 

float c1= 0.00635;
float c2= 0.006054;
float c3= 1236.5;
float c4= 2000;


/****Funciones****/
int fcarreraX();
int fcarreraY();
void movimiento();
void controlY();
void controlX();






//declaracion de constantes globales
//V vertical y H horizontal para todo caso
int currentPositionH; //Variable para el conteo del encoder horizontal
int currentPositionV; //Variable para el conteo del encoder vertical
int previousPositionH=0; //Variable para el conteo del encoder horizontal
int previousPositionV=0; //Variable para el conteo del encoder vertical
char displayStrH[20]= {'\0'};//Display LCD
char displayStrV[20]= {'\0'};//Display LCD
char displayStrm[20]= {'\0'};//Display LCD
float cicloh, velh; // esta es la variabe la cual va a permitir incluir la correccion con la curva de mejor ajuste
float ciclos, ciclob;

//Variables locales para el algoritmo del control PI
//Bajada
float kpb=0.0027149;
float kib=0.031731;
//Subida
float kps=0.024765;
float kis=0.068408;   //original
//float kis=0.035;

//Horizontal
float kph=0.65186;
float kih=0.98818;

float errorX, errorZ;    // Antes estaban en Cero
float errorX_ant,errorZ_ant;
float integralX, integralZ;
float ctrl_pX, ctrl_pZ;
float ctrl_iX, ctrl_iZ;
float salidaX=0, salidaZ=0;    //  80     110

//Variables para lectura encoder, conversion a rpm 

float rpmv; 
float rpmh;

//Definicion parametros

//int Cant_vuelta_V=99;
//int Cant_vuelta_H=642;
//float rel_engranesH = 18.75;
//float rel_vuelta_distancia_veritcal=0.8; //Movimiento lineal en eje vertical respecto a las vueltas.
//float PosXactual=0, PosXfutura=50;//Posicion deseada en X
//float PosZactual=20, PosZfutura=0;//Posicion deseada en Z
float Xdelta;
float Zdelta;
float MaxX=100, MaxZ=39; //rango máximo de 45cm para el movimiento V y H.
float VelMaxZs= 300; //ciclo maximo de trabajo para 300rpm cuando sube (180 de ciclo)
float VelMaxZb= 303; //ciclo maximo de trabajo para 303rpm  cuando baja (150 de ciclo)
float VelMaxX= 19; // ciclo maximo de trabajo para 19rpm cuando se mueve izq o derecha (130 de ciclo)

int timeold=0, time; //Variables para conteo de 1s por ms
int ms_count=0;
int ms_count2=0;
int ms_count_old=0;
int ms_count_old2=0;
int enable=0;
int enable2=0;

float VelReqX;
float VelReqZ;



//Interrupcion del timer para conteo de 1 segundo, calculo de velocidades cada 10ms
CY_ISR(isr_Timer_1){
    ms_count_old = ms_count;
    ms_count++;
    ms_count_old2=ms_count2;
    ms_count2++;
    if(ms_count == 5) { // 0,1 second
        ms_count = 0; // reset ms counter
        timeold=time;
        time=time+1;
        enable=1;        
    }
    if(ms_count2 == 10000) { // 10 second
        ms_count2 = 0; // reset ms counter
        enable2=1;        
    } 
}


int main(void)
{
    CyGlobalIntEnable; /* Enable global interrupts. */
    
    /*Startup de los bloques del sistema*/
    Timer_Start();//Inicialización del timer para 5ms, para darle el tiempo de lectura a los Quad
    LCD_Start();       
    QuadDecH_Start(); //Sensor cuadratura para movimiento horizontal
    QuadDecV_Start(); //Sensor cuadratura para movimiento vertical
    Millis_Start();
    isr_Timer_1_StartEx(isr_Timer_1); //Inicializacion de la interrupcion para contar segundos con ms
    PWMv_Start();
    PWMh_Start();
    
    for(;;)
    {
        PWMh_WriteCompare2(10000);
        PWMh_WriteCompare1(0); 

        
        posx0=QuadDecH_GetCounter()*0.001273239;
        vel=abs((posx0-posx1));
        
        //controlY();

    LCD_Position(0,0);
    sprintf(displayStrH ,"VerH: %1.3f", vel);
    LCD_PrintString(displayStrH);
    
    LCD_Position(1,0);
    sprintf(displayStrV ,"VelV: %.3f", rpmv);
    LCD_PrintString(displayStrV);
    

    }
    
}
int fcarreraX() //Esta funcion detecta los finales de carrera del eje X
{
/***********Lee las entradas*****************/
    Pin1=FCX1_Read(); 
    Pin2=FCX2_Read();;
/*******************************************/

    
    if (Pin1==1)
        {
            return 1;
        }
    else if (Pin2==1)
        {
            return 2;
        }

    else 
        return 0;
}

int fcarreraY() //Esta funcion detecta los finales de carrera del eje Y
{
/***********Lee las entradas*****************/
    Pin3=FCY1_Read();;
    Pin4=FCY2_Read();;
/*******************************************/

    
    if (Pin1==1)
        {
            return 1;
        }
    else if (Pin2==1)
        {
            return 2;
        }
    else 
        return 0;
}


void movimiento()
{

    if (fcarreraX()== 1 && fcarreraX()== 0)
        {
    
            PWMh_WriteCompare1(30000);
            PWMh_WriteCompare2(0);
    
        }
    
    else if (fcarreraX()== 1 && fcarreraX()== 1)
        {
    
            PWMh_WriteCompare1(0);
            PWMh_WriteCompare2(30000);
        
        }
    
    else if (fcarreraY()== 1 && fcarreraX()== 1)
        {
    
            PWMv_WriteCompare1(30000);
            PWMv_WriteCompare2(0);
   
        }
    
        else if (fcarreraY()==1 && fcarreraX()== 1)
        {
            PWMv_WriteCompare1(0);
            PWMv_WriteCompare2(30000);
        
        
        }

}

void controlY()// En esta funcion se encuentra la funcion de transferencia del control
{

    eX= 1.667 - vel; // referencia de velocidad  
    
    sc= c1*eX - c2*eX1 + sc1;
    
    PWMh_WriteCompare1(sc*10000);
    PWMh_WriteCompare2(0);
    
    eX1=eX; //x(n)-> x(n-1)
    eX2=eX1; //x(n-1)-> x(n-2)
    
    vel1=vel;//
    vel2=vel1;//
    
    sc1=sc;
    
    
    
    
}

void controlX()// En esta funcion se encuentra la funcion de transferencia del control
{

    eX= REFF - posx0;
    
    sc= c1*eX - c2*eX1 - c3*eX2 + c4*posx2;
    
    eX1=eX; //x(n)-> x(n-1)
    eX2=eX1; //x(n-1)-> x(n-2)
    
    posx1=posx0;//
    posx2=posx1;//
    
    sc1=sc;
    sc2=sc;

}






/* [] END OF FILE */
